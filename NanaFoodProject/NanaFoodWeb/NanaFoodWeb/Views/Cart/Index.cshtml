@model List<NanaFoodWeb.Models.Dto.CartResponseDto>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Index";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<!-- Cart Section -->
<div class="container-fluid py-5" style="min-height:60vh;">
    <div class="row">
        <h4 class="text-center mb-4">Giỏ Hàng Của Tôi</h4>
         @if(Model.Count > 0)
         {
        <div class="col-lg-8 col-md-12">
                @foreach (var item in Model)
                {
                    <!-- Product -->
                    <div class="card mb-3 p-3 shadow-sm">
                        <div class="row g-0 align-items-center">
                            <div class="col-md-2">
                                <img src="@item.Image" class="img-fluid rounded-start" alt="@item.ProductName">
                            </div>
                            <div class="col-md-5">
                                <div class="card-body">
                                    <h5 class="card-title">@item.ProductName</h5>
                                    <a id="removeProduct" data-product-id="@item.ProductId" class="text-danger fw-bold" style="cursor : pointer;">Xóa</a>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="d-flex quantity-finder">
                                    <button class="btn btn-light btn-circle" id="decreaseQuantity" data-product-id="@item.ProductId" style="height: 31px; position: relative; left: 0px; top: 13px; transition: none;">-</button>
                                    <input type="text" id="quantity" value="@item.Quantity" max="20" class="form-control text-center mx-2 quantity-input" />
                                    <button class="btn btn-light btn-circle" id="increaseQuantity" data-product-id="@item.ProductId" style="height: 34px; position: relative; left: -1px; top: 12px; transition: none;">+</button>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <span class="ms-3 fw-bold total">@((item.Price * item.Quantity).ToString("##,##")) VNĐ</span>
                            </div>
                        </div>
                    </div>
                }                        
        </div>
        <!-- Cart Summary -->
        <div class="col-lg-4 col-md-12">
            <div class="card shadow-sm p-4">
                <div class="card-body">
                    <h5 class="card-title">Tóm tắt đơn hàng</h5>
                    <hr>
                    <div class="d-flex justify-content-between">
                            <strong>Tổng thanh toán</strong>
                        <span class="fw-bold sumoftotal">@Model.Select(x => x.Total).Sum().ToString("#,##") VNĐ</span>
                    </div>
                    <hr>
                    <a class="btn btn-danger w-100 mt-3" asp-action="Index" asp-controller="Order" class="btn btn-primary">Thanh toán</a>
                </div>
            </div>
        </div>
        }
        else
        {
            <img src="https://niceillustrations.com/wp-content/uploads/2020/09/Person-With-Shopping-Cart-768x767.png" style="width: 236.006px; height: 207.847px; transform: translate(800px, 1234.45px); position: relative; left: 116px; top: -1261px; transition: none;">
            <h5 class="text-muted" style="position: relative; left: 281px; top: 82px; width: 397.297px; height: 27.6388px; transition: none;">Không có sản phẩm nào trong giỏ hàng</h5>
        }
    </div>
</div>

<script>
    // Hàm để đọc cookie
    function getCookie(name) {
        let cookieArr = document.cookie.split(";"); // Tách các cặp cookie
        for (let i = 0; i < cookieArr.length; i++) {
            let cookiePair = cookieArr[i].split("="); // Tách từng cặp tên-giá trị cookie
            if (name == cookiePair[0].trim()) {
                return decodeURIComponent(cookiePair[1]); // Trả về giá trị của cookie nếu tìm thấy
            }
        }
        return null; // Trả về null nếu không tìm thấy cookie
    }

    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function formatCurrency(amount) {
        return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + ' VNĐ';
    }

    $(document).ready(function () {
        // Lấy JWT token từ cookie
        var jwtToken = getCookie('JWTToken');

        function updateTotal() {
            let totalSum = 0;

            // Duyệt qua tất cả các sản phẩm để tính tổng
            $('.total').each(function () {
                let priceText = $(this).text().replace(/ VNĐ/, "").replace(/,/g, ""); // Lấy giá và chuyển đổi thành số
                totalSum += parseFloat(priceText);
            });

            // Cập nhật phần tử hiển thị tổng đơn hàng
            $('.sumoftotal').text(formatCurrency(totalSum));
        }

        $("a#removeProduct").click(function () {
            const cartCount = getCookie('CartCount');
            var productId = $(this).data("product-id");
            var productCard = $(this).closest('.card');
            productCard.remove();
            $.ajax({
                url: 'https://localhost:7094/api/Cart/deletecart/' + productId,
                type: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + jwtToken
                },
                success: function () {
                    if (cartCount !== null) {
                        const updatedCartCount = (Number(cartCount) - 1).toString();
                        setCookie('CartCount', updatedCartCount, 7);
                        document.getElementById("cartCount").innerText = updatedCartCount;
                    } else {
                        // Nếu không có giá trị trong cookie, đặt về 0 hoặc giá trị mặc định khác
                        document.getElementById("cartCount").innerText = "0";
                    }
                    updateTotal();
                },
                error: function (xhr, status, error) {
                    console.log('result error' + xhr.responseText);
                }
            });
        });

        // Xử lý sự kiện click vào nút "Giảm số lượng"
        $(".btn#decreaseQuantity").click(function () {
            const cartCount = getCookie('CartCount');
            var productId = $(this).data("product-id");
            var quantityInput = $(this).closest('.quantity-finder').find('.quantity-input');
            var totalPriceElement = $(this).closest('.row').find('.total'); // Phần tử hiển thị tổng giá tiền
            var productCard = $(this).closest('.card');
            $.ajax({
                url: 'https://localhost:7094/api/Cart/UpdateCart/' + productId + '&decrease',
                type: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + jwtToken // Thêm JWT vào header
                },
                success: function (response) {
                    var newQuantity = response.result.quantity;

                    if (newQuantity === 0) {
                        // Remove product from the DOM if quantity is 0
                        productCard.remove();

                        // Optionally, you can send a DELETE request to the API if you haven't done so already
                        $.ajax({
                            url: 'https://localhost:7094/api/Cart/deletecart/' + productId,
                            type: 'DELETE',
                            headers: {
                                'Authorization': 'Bearer ' + jwtToken
                            },
                            success: function (deleteResponse) {
                                if (cartCount !== null) {
                                    const updatedCartCount = (Number(cartCount) - 1).toString();
                                    setCookie('CartCount', updatedCartCount, 7);
                                    document.getElementById("cartCount").innerText = updatedCartCount;
                                } else {
                                    // Nếu không có giá trị trong cookie, đặt về 0 hoặc giá trị mặc định khác
                                    document.getElementById("cartCount").innerText = "0";
                                }
                            },
                            error: function (xhr, status, error) {
                            }
                        });
                    } else {
                        var newTotalPrice = response.result.total;

                        // Cập nhật giá trị mới vào input số lượng
                        quantityInput.val(newQuantity);

                        // Cập nhật giá trị mới vào tổng tiền
                        totalPriceElement.text(formatCurrency(newTotalPrice));
                    }

                    // Cập nhật tổng đơn hàng
                    updateTotal();
                },
                error: function (xhr, status, error) {
                    console.log('result error' + xhr.responseText);
                }
            });
        });

        // Xử lý sự kiện click vào nút "Tăng số lượng"
        $(".btn#increaseQuantity").click(function () {
            var productId = $(this).data("product-id");
            var quantityInput = $(this).closest('.quantity-finder').find('.quantity-input');
            var totalPriceElement = $(this).closest('.row').find('.total'); // Phần tử hiển thị tổng giá tiền

            $.ajax({
                url: 'https://localhost:7094/api/Cart/UpdateCart/' + productId + '&increase',
                type: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + jwtToken // Thêm JWT vào header
                },
                success: function (response) {
                    var newQuantity = response.result.quantity;
                    var newTotalPrice = response.result.total;

                    // Cập nhật giá trị mới vào input số lượng
                    quantityInput.val(newQuantity);

                    // Cập nhật giá trị mới vào tổng tiền
                    totalPriceElement.text(formatCurrency(newTotalPrice));

                    // Cập nhật tổng đơn hàng
                    updateTotal();
                },
                error: function (xhr, status, error) {
                    console.log('result error' + xhr.responseText);
                }
            });
        });
    });
</script>
